-----> twilio otp <-----

https://pypi.org/project/phonenumbers/
https://pypi.org/project/django-phonenumber-field/

https://pythonguides.com/register-user-with-otp-verification-in-django/
https://www.twilio.com/blog/enable-multiple-otp-methods-django
https://youtu.be/yjBIBDk81dg
https://www.twilio.com/blog/verify-phone-numbers-django-twilio-verify
https://django-otp-twilio.readthedocs.io/en/latest/
https://blog.devgenius.io/how-to-implement-mobile-number-verification-and-authentication-with-otp-in-django-drf-73d3161380d
https://www.codementor.io/@rishabh_ags/twilio-project-bl2kk9fwj

-----> django otp <-----

https://django-otp-official.readthedocs.io/en/stable/
https://medium.com/viithiisys/creating-and-verifying-one-time-passwords-with-django-otp-861f472f602f
https://studygyaan.com/django/email-otp-verification-form-using-ajax-django


-----> django internalization <-----
https://vegibit.com/django-internationalization-and-localization/
https://www.django-rest-framework.org/topics/internationalization/
https://lokalise.com/blog/advanced-django-internationalization/
https://testdriven.io/blog/multiple-languages-in-django/
https://github.com/python-babel/babel


-----> django admin customization <-----
https://earthly.dev/blog/customize-django-admin-site/
https://docs.djangoproject.com/en/4.2/ref/contrib/admin/
https://rajansahu713.medium.com/customization-of-django-admin-interface-312b4a3c0f84
https://data-flair.training/blogs/django-admin-customization/
https://www.section.io/engineering-education/customizing-django-admin/



Document API -->
Changelog and API Versioning

Test API -->
Manual Testing
Do -> Unit Testing (Django Test Framework, Graphene Test Framework, pytest)
Do -> Integration Testing 
Schema Testing
Mocking and Stubbing (freezegun)
Auth Testing 
Performance Testing (locust)
Snapshot Testing (snapshot_testing)
CI/CD
Monitoring and Logging (Prometheus)

Git Release/Features
Deploy API

environment variables
pipenv (Advantages of Pipfile.lock Over requirements.txt)


----------> Location Finder <----------


pip install geoip2 geopy

GEOIP_PATH = '/path/to/geoip/database'

------> views.py

from django.shortcuts import render
from django.contrib.gis.geoip2 import GeoIP2
from geopy.geocoders import Nominatim

def location_finder(request):
    if request.META.get('REMOTE_ADDR'):
        # Get the user's location based on their IP address
        geoip = GeoIP2()
        ip = request.META.get('REMOTE_ADDR')
        location = geoip.city(ip)
        location_details = f"{location['city']}, {location['region']}, {location['country_name']}"
    else:
        # Get the user's location based on their browser's geolocation API
        geolocator = Nominatim(user_agent='location_finder')
        location = geolocator.reverse(f"{latitude}, {longitude}")
        location_details = location.address

    context = {'location_details': location_details}
    return render(request, 'location_finder.html', context)

------> location_finder.html

<!DOCTYPE html>
<html>
<head>
    <title>Location Finder</title>
</head>
<body>
    <h1>Location Finder</h1>
    <div>{{ location_details }}</div>
</body>
</html>


------> urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('location-finder/', views.location_finder, name='location_finder'),
]



-----------------> Django (CI/CD) <------------------

--------> CI

name: Django CI

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Run tests
      run: python manage.py test


--------> CD


name: Django CD

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: my-django-app
        docker_image: my-django-app:${{ github.sha }}
        extra_args: "--wait-for-deploy"
        
        
       
-----------------> django.urls <------------------

-----> path

from django.urls import path
from . import views

urlpatterns = [
    path('home/', views.home_view, name='home'),
    path('about/', views.about_view, name='about'),
    # ... other URL patterns ...
]


------> re_path

from django.urls import re_path
from . import views

urlpatterns = [
    re_path(r'^articles/(?P<slug>[\w-]+)/$', views.article_view, name='article'),
    re_path(r'^category/(?P<category>[\w-]+)/$', views.category_view, name='category'),
    # ... other URL patterns ...
]


------> include

from django.urls import path, include
from . import views

urlpatterns = [
    path('', views.home_view, name='home'),
    path('accounts/', include('accounts.urls')),
    path('articles/', include('articles.urls')),
    # ... other URL patterns ...
]


------> reverse_lazy 

from django.urls import reverse_lazy

class MyModel(models.Model):
    # ... model fields ...

    def get_absolute_url(self):
        return reverse_lazy('article', args=[str(self.id)])
        
        
------> reslove

from django.urls import resolve

def my_view(request):
    # ... view logic ...

    url_path = '/articles/1/'
    match = resolve(url_path)
    if match.url_name == 'article':
        # ... do something 
        
        
       
-----------------> configuring static files <------------------

------> check in settings.py

django.contrib.staticfiles

on INSTALLED_APPS

-----> Create a "static" directory in your Django app's directory (or in the project-level directory if you want to share static files across multiple apps).

-----> Add static file finders

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django.contrib.staticfiles.finders.FileSystemFinder',
]

------> Define STATIC_URL

STATIC_URL = "static/"

------> Add STATICFILES_DIRS

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'my_static_directory'),
]


-------> static template tag
{% load static %}
<link rel="stylesheet" href="{% static 'css/styles.css' %}">

-------> Collect static files

python manage.py collectstatic


-----------------> serving static file <------------------

from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # ... the rest of your URLconf goes here ...
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)



-----------------> serving media file <------------------

from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # ... the rest of your URLconf goes here ...
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)








