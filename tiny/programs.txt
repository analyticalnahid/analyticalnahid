>>>>>>>>>>>> otp expiration <<<<<<<<<<<<

https://pypi.org/project/django-phone-verify/
https://django-otp-twilio.readthedocs.io/en/latest/

Document API -->
Changelog and API Versioning

Test API -->
Manual Testing
Do -> Unit Testing (Django Test Framework, Graphene Test Framework, pytest)
Do -> Integration Testing 
Schema Testing
Mocking and Stubbing (freezegun)
Auth Testing 
Performance Testing (locust)
Snapshot Testing (snapshot_testing)
CI/CD
Monitoring and Logging (Prometheus)

Git Release/Features
Deploy API

environment variables
pipenv (Advantages of Pipfile.lock Over requirements.txt)


pip install django-otp

INSTALLED_APPS = [
    # Other apps
    'django_otp',
    'django_otp.plugins.otp_totp',
]

from django_otp.oath import TOTP
from django_otp.util import random_hex

# Generate OTP secret key
otp_secret_key = random_hex(20)

# Generate OTP object
otp = TOTP(key=otp_secret_key)

# Generate OTP token
otp_token = otp.token()

# Validate OTP token
is_valid_token = otp.verify(otp_token, drift=3*60)  # Drift is set to 3 minutes (180 seconds)

if is_valid_token:
    # OTP token is valid
    # Do something
else:
    # OTP token is invalid or expired
    # Handle accordingly

>>>>>>>>>>>> django allauth <<<<<<<<<<<<

pip install django-allauth

INSTALLED_APPS = [
    # Other apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.google',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]


from django.urls import include

urlpatterns = [
    # Other URL patterns
    path('accounts/', include('allauth.urls')),
]

from rest_framework.views import APIView
from rest_framework.response import Response
from allauth.socialaccount.providers.oauth2.client import OAuth2Client
from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
from allauth.socialaccount.providers.google.views import GoogleOAuth2Adapter
from allauth.socialaccount.providers.oauth2.client import OAuth2Error

class SocialAuthAPIView(APIView):
    def post(self, request):
        provider = request.data.get('provider')  # 'facebook' or 'google'
        access_token = request.data.get('access_token')

        if provider == 'facebook':
            adapter = FacebookOAuth2Adapter(request)
        elif provider == 'google':
            adapter = GoogleOAuth2Adapter(request)
        else:
            return Response({'error': 'Invalid provider'}, status=400)

        try:
            token = {'access_token': access_token}
            client = OAuth2Client(request)
            token = adapter.parse_token(token)
            token = adapter.complete_login(request, app, token)
            login(request, token.account, backend='allauth.account.auth_backends.AuthenticationBackend')
            # Additional logic after successful login

            return Response({'detail': 'Successfully authenticated.'}, status=200)
        except OAuth2Error as e:
            return Response({'error': str(e)}, status=400)


from django.urls import path
from your_app.views import SocialAuthAPIView

urlpatterns = [
    # Other URL patterns
    path('api/social-auth/', SocialAuthAPIView.as_view()),
]




----------> QR Code Authentication <----------

pip install qrcode Pillow

------> models.py

from django.db import models
from django.contrib.auth.models import User

class QRCode(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    code = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)


-------> views.py

import qrcode
from io import BytesIO
from django.shortcuts import render
from django.http import HttpResponse
from django.utils import timezone
from PIL import Image
from django.utils import timezone
from qrcode import exceptions as qrcode_exceptions


def verify_qr(request):
    # Get the code from the request
    code = request.GET.get('code')
    
    # Try to decode the code
    try:
        qr = qrcode.QRCode()
        qr.add_data(code)
        qr.make()
        data = qr.make_image().getdata()
        username = ''.join([chr(int(d % 256)) for d in data]).strip()
        
        # Check if the code matches the user's username
        if username == request.user.username:
            return HttpResponse('Code verified successfully!')
        else:
            return HttpResponse('Invalid code.')
    
    # If the code cannot be decoded, return an error message
    except qrcode_exceptions:
        return HttpResponse('Invalid code.')



def generate_qr(request):
    # Generate the QR code
    code = qrcode.make(request.user.username)
    
    # Convert the QR code to an image
    img = Image.new('RGB', (300, 300), color='white')
    img.paste(code)
    
    # Save the image to a buffer
    buffer = BytesIO()
    img.save(buffer, 'PNG')
    
    # Save the QR code to the database
    qrcode_obj = QRCode.objects.create(user=request.user, code=request.user.username, created_at=timezone.now())
    
    # Return the QR code image as a response
    return HttpResponse(buffer.getvalue(), content_type='image/png')


-------> urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('generate-qr/', views.generate_qr, name='generate_qr'),
    path('verify-qr/', views.verify_qr, name='verify_qr'),
]

----------> Location Finder <----------

-------> views.py

from django.shortcuts import render

def location_finder(request):
    return render(request, 'location_finder.html')

--------> location_finder.html

<!DOCTYPE html>
<html>
<head>
    <title>Location Finder</title>
</head>
<body>
    <h1>Location Finder</h1>
    <button onclick="getLocation()">Find Me</button>
    <div id="location-details"></div>
    <script>
        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showLocation);
            } else {
                alert('Geolocation is not supported by this browser.');
            }
        }

        function showLocation(position) {
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            const accuracy = position.coords.accuracy;
            const timestamp = position.timestamp;
            const locationDetails = `Latitude: ${latitude}<br>Longitude: ${longitude}<br>Accuracy: ${accuracy} meters<br>Timestamp: ${timestamp}`;
            document.getElementById('location-details').innerHTML = locationDetails;
        }
    </script>
</body>
</html>

--------> urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('location-finder/', views.location_finder, name='location_finder'),
]




pip install geoip2 geopy

GEOIP_PATH = '/path/to/geoip/database'

------> views.py

from django.shortcuts import render
from django.contrib.gis.geoip2 import GeoIP2
from geopy.geocoders import Nominatim

def location_finder(request):
    if request.META.get('REMOTE_ADDR'):
        # Get the user's location based on their IP address
        geoip = GeoIP2()
        ip = request.META.get('REMOTE_ADDR')
        location = geoip.city(ip)
        location_details = f"{location['city']}, {location['region']}, {location['country_name']}"
    else:
        # Get the user's location based on their browser's geolocation API
        geolocator = Nominatim(user_agent='location_finder')
        location = geolocator.reverse(f"{latitude}, {longitude}")
        location_details = location.address

    context = {'location_details': location_details}
    return render(request, 'location_finder.html', context)

------> location_finder.html

<!DOCTYPE html>
<html>
<head>
    <title>Location Finder</title>
</head>
<body>
    <h1>Location Finder</h1>
    <div>{{ location_details }}</div>
</body>
</html>


------> urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('location-finder/', views.location_finder, name='location_finder'),
]


-----------> Backend (Registration) <--------

django-admin startproject myproject
cd myproject
django-admin startapp myapp

-------> settings.py

INSTALLED_APPS = [
    # ...
    'rest_framework',
    'myapp',  # Replace 'myapp' with the name of your app
]

# Set the default authentication and permission classes for DRF
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

-----> models.py

from django.db import models

class User(models.Model):
    email = models.EmailField(unique=True)
    password = models.CharField(max_length=128)
    # Add other fields as needed


------> serializes.py

from rest_framework import serializers
from .models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'email', 'password',)  # Add other fields as needed
        extra_kwargs = {'password': {'write_only': True}}

    def create(self, validated_data):
        user = User(email=validated_data['email'])
        user.set_password(validated_data['password'])
        user.save()
        return user

-----> views.py

from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import User
from .serializers import UserSerializer
from django.core.mail import send_mail
from django.conf import settings
from django.utils import timezone
from django.contrib.auth.tokens import default_token_generator
from django.contrib.sites.shortcuts import get_current_site
from django.urls import reverse
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.utils.encoding import force_bytes, force_text

@api_view(['POST'])
def register(request):
    serializer = UserSerializer(data=request.data)
    if serializer.is_valid():
        user = serializer.save()
        user.is_active = False
        user.save()

        # Send confirmation email
        current_site = get_current_site(request)
        subject = 'Activate Your Account'
		message = f'Please click the link below to activate your account:\n\n'
		message += f'http://{current_site.domain}{reverse("activate", args=[urlsafe_base64_encode(force_bytes(user.pk)), default_token_generator.make_token(user)])}\n\n'
		message += 'Thank you for registering!'
		from_email = settings.DEFAULT_FROM_EMAIL
		recipient_list = [user.email]
		send_mail(subject, message, from_email, recipient_list)
		return Response({'message': 'Please check your email to activate your account.'}, status=status.HTTP_201_CREATED)
	else:
    	return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['POST'])
def activate(request, uidb64, token):
try:
uid = force_text(urlsafe_base64_decode(uidb64))
user = User.objects.get(pk=uid)
except (TypeError, ValueError, OverflowError, User.DoesNotExist):
user = None
if user is not None and default_token_generator.check_token(user, token):
    user.is_active = True
    user.save()
    return Response({'message': 'Account activated successfully.'}, status=status.HTTP_200_OK)
else:
    return Response({'error': 'Invalid activation link.'}, status=status.HTTP_400_BAD_REQUEST)


@api_view(['POST'])
def login(request):
email = request.data.get('email')
password = request.data.get('password')
user = User.objects.filter(email=email).first()

if user is None:
    return Response({'error': 'Invalid email or password.'}, status=status.HTTP_400_BAD_REQUEST)

if not user.check_password(password):
    return Response({'error': 'Invalid email or password.'}, status=status.HTTP_400_BAD_REQUEST)

# You can customize the response data as needed
# For example, you can generate a token for authentication
response_data = {
    'message': 'Login successful.',
    'user_id': user.id,
    'email': user.email,
    # Add other user data as needed
}

return Response(response_data, status=status.HTTP_200_OK)


@api_view(['POST'])
def reset_password(request):
	email = request.data.get('email')
	user = User.objects.filter(email=email).first()

if user is None:
    return Response({'error': 'Invalid email.'}, status=status.HTTP_400_BAD_REQUEST)

# Generate password reset link
current_site = get_current_site(request)
subject = 'Reset Your Password'
message = f'Please click the link below to reset your password:\n\n'
message += f'http://{current_site.domain}{reverse("reset_password_confirm", args=[urlsafe_base64_encode(force_bytes(user.pk)), default_token_generator.make_token(user)])}\n\n'
message += 'If you did not request a password reset, please ignore this email.'
from_email = settings.DEFAULT_FROM_EMAIL
recipient_list = [user.email]
send_mail(subject, message, from_email, recipient_list)

return Response({'message': 'Password reset link has been sent to your email.'}, status=status.HTTP_200_OK)


@api_view(['POST'])
def reset_password_confirm(request, uidb64, token):
	try:
	uid = force_text(urlsafe_base64_decode(uidb64))
	user = User.objects.get(pk=uid)
except (TypeError, ValueError, OverflowError, User.DoesNotExist):
	user = None
	if user is not None and default_token_generator.check_token(user, token):
    # Set a new password for the user
    new_password = request.data.get('new_password')
    user.set_password(new_password)
    user.save()

    return Response({'message': 'Password reset successful.'}, status=status.HTTP_200_OK)
    else:
return Response({'error': 'Invalid password reset link.'}, status=status.HTTP_400_BAD_REQUEST)


-----> urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),  # Replace 'myapp' with the name of your app
]


-----------> Frontend (Registration) <--------

npm install axios

-----> Login.js

import React, { useState } from 'react';
import axios from 'axios';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleLogin = async () => {
    try {
      const response = await axios.post('/api/login/', { email, password });
      // Handle successful login
      console.log(response.data);
    } catch (error) {
      // Handle login error
      setError('Invalid email or password.');
    }
  };

  return (
    <div>
      <h1>Login</h1>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <button onClick={handleLogin}>Login</button>
      {error && <p>{error}</p>}
    </div>
  );
};

export default Login;


--------> Register.js

import React, { useState } from 'react';
import axios from 'axios';

const Register = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');

  const handleRegister = async () => {
    try {
      const response = await axios.post('/api/register/', {
        email,
        password,
        confirm_password: confirmPassword,
      });
      // Handle successful registration
      console.log(response.data);
    } catch (error) {
      // Handle registration error
      setError('Registration failed. Please check your input.');
    }
  };

  return (
    <div>
      <h1>Register</h1>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <input
        type="password"
        placeholder="Confirm Password"
        value={confirmPassword}
        onChange={(e) => setConfirmPassword(e.target.value)}
      />
      <button onClick={handleRegister}>Register</button>
      {error && <p>{error}</p>}
    </div>
  );
};

export default Register;


------> ConfirmPassword.js

import React, { useState } from 'react';
import axios from 'axios';

const ConfirmPassword = ({ uid, token }) => {
  const [newPassword, setNewPassword] = useState('');
  const [confirmNewPassword, setConfirmNewPassword] = useState('');
  const [error, setError] = useState('');
  const [message, setMessage] = useState('');

  const handleConfirmPassword = async () => {
    try {
      const response = await axios.post('/api/confirm_password/', {
        uid,
        token,
        new_password: newPassword,
        confirm_new_password: confirmNewPassword,
      });
      // Handle successful password confirmation
      setMessage(response.data.message);
    } catch (error) {
      // Handle password confirmation error
      setError('Password confirmation failed. Please check your input.');
    }
  };

  return (
    <div>
      <h1>Confirm Password</h1>
      <input
        type="password"
        placeholder="New Password"
        value={newPassword}
        onChange={(e) => setNewPassword(e.target.value)}
      />
      <input
        type="password"
        placeholder="Confirm New Password"
        value={confirmNewPassword}
        onChange={(e) => setConfirmNewPassword(e.target.value)}
      />
      <button onClick={handleConfirmPassword}>Confirm Password</button>
      {error && <p>{error}</p>}
      {message && <p>{message}</p>}
    </div>
  );
};

export default ConfirmPassword;



------> ResetPassword.js

import React, { useState } from 'react';
import axios from 'axios';

const ResetPassword = () => {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  const [message, setMessage] = useState('');

  const handleResetPassword = async () => {
    try {
      const response = await axios.post('/api/reset_password/', { email });
      // Handle successful password reset request
      setMessage(response.data.message);
    } catch (error) {
      // Handle password reset request error
      setError('Password reset request failed. Please check your input.');
}
};

return (
<div>
<h1>Reset Password</h1>
<input
type="email"
placeholder="Email"
value={email}
onChange={(e) => setEmail(e.target.value)}
/>
<button onClick={handleResetPassword}>Reset Password</button>
{error && <p>{error}</p>}
{message && <p>{message}</p>}
</div>
);
};

export default ResetPassword;



-----------------> Django (CI/CD) <------------------

--------> CI

name: Django CI

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Run tests
      run: python manage.py test


--------> CD


name: Django CD

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: my-django-app
        docker_image: my-django-app:${{ github.sha }}
        extra_args: "--wait-for-deploy"
        
        
       
-----------------> django.urls <------------------

-----> path

from django.urls import path
from . import views

urlpatterns = [
    path('home/', views.home_view, name='home'),
    path('about/', views.about_view, name='about'),
    # ... other URL patterns ...
]


------> re_path

from django.urls import re_path
from . import views

urlpatterns = [
    re_path(r'^articles/(?P<slug>[\w-]+)/$', views.article_view, name='article'),
    re_path(r'^category/(?P<category>[\w-]+)/$', views.category_view, name='category'),
    # ... other URL patterns ...
]


------> include

from django.urls import path, include
from . import views

urlpatterns = [
    path('', views.home_view, name='home'),
    path('accounts/', include('accounts.urls')),
    path('articles/', include('articles.urls')),
    # ... other URL patterns ...
]


------> reverse_lazy 

from django.urls import reverse_lazy

class MyModel(models.Model):
    # ... model fields ...

    def get_absolute_url(self):
        return reverse_lazy('article', args=[str(self.id)])
        
        
------> reslove

from django.urls import resolve

def my_view(request):
    # ... view logic ...

    url_path = '/articles/1/'
    match = resolve(url_path)
    if match.url_name == 'article':
        # ... do something 
        
        
       
-----------------> configuring static files <------------------

------> check in settings.py

django.contrib.staticfiles

on INSTALLED_APPS

-----> Create a "static" directory in your Django app's directory (or in the project-level directory if you want to share static files across multiple apps).

-----> Add static file finders

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django.contrib.staticfiles.finders.FileSystemFinder',
]

------> Define STATIC_URL

STATIC_URL = "static/"

------> Add STATICFILES_DIRS

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'my_static_directory'),
]


-------> static template tag
{% load static %}
<link rel="stylesheet" href="{% static 'css/styles.css' %}">

-------> Collect static files

python manage.py collectstatic


-----------------> serving static file <------------------

from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # ... the rest of your URLconf goes here ...
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)



-----------------> serving media file <------------------

from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # ... the rest of your URLconf goes here ...
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)








